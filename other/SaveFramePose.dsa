/**********************************************************************
 
	Copyright (C) 2002-2018 Daz 3D, Inc. All Rights Reserved.
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/file_io/save_duf_pose/start

/*********************************************************************/

	// Get the asset IO manager
	var oAssetIOMgr = App.getAssetIOMgr();
	// Define the class name of the asset filter we want to use
	var sClassName = "DzPoseAssetFilter";
	// Find the index of the asset filter with the class name we want
	var nAssetIOFilter = oAssetIOMgr.findFilter( sClassName );
	// If we did not find an asset filter with the class name we wanted
	if( nAssetIOFilter < 0 ){
		// Inform the user
		MessageBox.critical( text( "An asset filter with the class name " +
			"\"%1\" could not be found.").arg( sClassName ),
			text( "Critical Error" ), text( "&OK" ) );
		
		// We are done...
		return;
	}
	
	// Get the asset filter at the prescribed index
	var oAssetIOFilter = oAssetIOMgr.getFilter( nAssetIOFilter );
	// If we do not have a valid asset filter
	if( !oAssetIOFilter ){
		// Inform the user
		MessageBox.critical( text( "An asset filter with the class name " +
			"\"%1\" could not be found.").arg( sClassName ),
			text( "Critical Error" ), text( "&OK" ) );
		
		// We are done...
		return;
	}
	
	// Create a settings object
	var oSettings = new DzFileIOSettings();
	
	// Get the default settings
	oAssetIOFilter.getDefaultOptions( oSettings );

	// Define whether or not to show options
	var bShowOptions = false;
	var bOptionsShown = true;
	
	// Get the root of the primary selection
	var oRootNode = getRootNode( Scene.getPrimarySelection() );
	
	// If we had a node selected, get its name otherwise use a default
	var sRootName = (oRootNode ? oRootNode.getName() : "Genesis8Female");
	var sRootLabel = (oRootNode ? oRootNode.getLabel() : "");
	
	// Set the default options; this can be used to set
	// options before the dialog is displayed
	setDefaultOptions( oSettings, sRootLabel );
	
	// Set the current frame options
	oSettings.setBoolValue( "SaveCurFrame", true );

	// Debug
//	debug( "Defaults:", oSettings.toJsonString() );
	
	// Initialize
	var aNodeNames = [];
	
		// Define whether we only want the selected nodes (false),
		// or whether we want selected recursive (true)
		var bRecursive = true;
		
		// Declare working variables
		var oNode, oRoot, oParent;
		var bAdd;
		
		// Create a array helper object
		var oArrayHelper = new DzArrayHelper();
		
		// Initialize an array for collecting the nodes
		var aNodes = [];
		
		// Get the selected nodes from the scene
		var aSelectedNodes = Scene.getSelectedNodeList();
		// Iterate over the selected nodes
		for( var i = 0, nNodes = aSelectedNodes.length; i < nNodes; i += 1 ){
			// Get the 'current' node
			oNode = aSelectedNodes[ i ];
			
			// Get the root of the node
			oRoot = getRootNode( oNode );
			
			// If the node is not in the same object as the primary selection
			if( !pointersAreEqual( oRootNode, oRoot ) ){
				// Next!!
				continue;
			}
			
			// Initialize
			bAdd = true;
			
			// If we are recursing
			if( bRecursive ){
				// Get the node parent
				oParent = oNode.getNodeParent();
				// Climb the node hierarchy
				while( oParent ){
					// If the parent is selected
					if( oParent.isSelected() ){
						// Update the flag
						bAdd = false;
						// We are done climbing...
						break;
					}
					
					// Get the next higher ancestor
					oParent = oParent.getNodeParent();
				}
			}
			
			// If we are not adding the node
			if( !bAdd ){
				// Next!!
				continue;
			}
			
			// Add the the node to the array; if it is not already there
			aNodes = oArrayHelper.addToArray( aNodes, oNode );
		}
		
		// Iterate over the nodes
		for( var i = 0; i < aNodes.length; i += 1 ){
			// Collect node names
			aNodeNames = aNodeNames.concat( getNodeNames( aNodes[ i ], bRecursive ) );
		}

	// If we are not showing options
	if( !bShowOptions ){
		// Set common property options for multiple nodes
		setCommonNodePropertyOptions( oSettings, aNodeNames, [ "XRotate", "YRotate", "ZRotate", "XTranslate", "YTranslate", "ZTranslate" ] );
		
		// Set whether to bypass the filter that culls properties based on
		// their type; use this with caution as this could lead to
		// unexpected results for the user of the generated file
		oSettings.setBoolValue( "BypassFilter", false );
	}
	
	// Set the required options; override user settings if needed
	setRequiredOptions( oSettings, !bOptionsShown );



	var sScriptFileName = DzFile(getScriptFileName());
	var sInitName = sScriptFileName.path()+"/"+sScriptFileName.baseName()+".ini";

	var range = Scene.getAnimRange();
	var nEndFrame = range.end / Scene.getTimeStep();
	
	for( var nNowFrame = 0; nNowFrame < nEndFrame+1; nNowFrame++ ){

		Scene.setFrame( nNowFrame );

		// Construct the name of the file to save to; omit file extension
		var sFile = String("%1/%2").arg( sScriptFileName.path() ).arg( nNowFrame );

	
		// Use the asset manager to save a file, using the filter and defined settings
		var oError = oAssetIOMgr.doSaveWithOptions( oAssetIOFilter, oSettings,
		false, sFile, sScriptFileName.path(), "" );

		// If there was no error
		if( oError.valueOf() == 0x00000000 ){
		// If there was an error
		} else {
			MessageBox.warning("Error:" + getErrorMessage( oError ) , qsTr("Error"), qsTr("&OK"), qsTr("&Cancel") );
		}
	}

	// Clean up; do not leak memory
	oAssetIOFilter.deleteLater();
	
	MessageBox.warning("Complete " + getErrorMessage( oError ) , qsTr("SaveFramePose"), qsTr("&OK"), qsTr("&Cancel") );




	// Initialize whether or not property sub-items are supported
	var g_bSupportsNodeSubItems = false;
	
	
	/*********************************************************************/
	// void : A function for printing only if debugging
	function debug()
	{
		
		// Convert the arguments object into an array
		var aArguments = [].slice.call( arguments );
		
		// Print the array
		print( aArguments.join(" ") );
	};
	
	/*********************************************************************/
	// String : A function for retrieving a translation if one exists
	function text( sText )
	{
		// If the version of the application supports qsTr()
		if( typeof( qsTr ) != "undefined" ){
			// Return the translated (if any) text
			return qsTr( sText );
		}
 
		// Return the original text
		return sText;
	};
	
	/*********************************************************************/
	// Boolean : A function for testing whether or not a QObject instance
	// inherits one of a list of types
	function inheritsType( oObject, aTypeNames )
	{
		// If the object does not define the 'inherits' function
		if( !oObject || typeof( oObject.inherits ) != "function" ){
			// We are done... it is not a QObject
			return false;
		}
		
		// Iterate over the list of type names
		for( var i = 0, nTypes = aTypeNames.length; i < nTypes; i += 1 ){
			// If the object does not inherit the 'current' type
			if( !oObject.inherits( aTypeNames[i] ) ){
				// Next!!
				continue;
			}
			
			// Return the result
			return true;
		}
		
		// Return the result
		return false;
	};
	
	/*********************************************************************/
	// DzNode : A function for getting the root of a node
	function getRootNode( oNode )
	{
		// If we have a node and it is a bone
		if( oNode && inheritsType( oNode, ["DzBone"] ) ){
			// We want the skeleton
			return oNode.getSkeleton();
		}
		
		// Return the original node
		return oNode;
	};
	
	/*********************************************************************/
	// void : A function for setting the default options
	function setDefaultOptions( oSettings, sRootLabel )
	{
		// If the root label is not empty
		if( !sRootLabel.isEmpty() ){
			// Set the label of the root node to find it in the scene;
			// this can be used to override selection within the scene
			oSettings.setStringValue( "RootLabel", sRootLabel );
		}
	};
	
	/*********************************************************************/
	// void : A function for setting the property options for an element
	function setElementPropertyOptions( oSettings, sElementSettingsKey, sElementName, aPropNames, bSubItems )
	{
		// Get the (nested) settings that hold the named element and properties
		var oElementsSettings = oSettings.getSettingsValue( sElementSettingsKey );
		// If the object doesn't already exist
		if( !oElementsSettings ){
			// Create it
			oElementsSettings = oSettings.setSettingsValue( sElementSettingsKey );
		}
		
		// Get the (nested) settings object for the element
		var oElementSettings = oElementsSettings.getSettingsValue( sElementName );
		// If the object doesn't already exist
		if( !oElementSettings ){
			// Create it
			oElementSettings = oElementsSettings.setSettingsValue( sElementName );
		}
		
		// Declare working variable
		var vPropertyItem;
		var sPropertyName;
		var oPropertySettings, oSubItemSettings;
		
		// Iterate over the property items
		for( var i = 0; i < aPropNames.length; i += 1 ){
			// Get the 'current' property item
			vPropertyItem = aPropNames[ i ];
			
			// If the filter doesn't support property sub-items,
			// or the property item is a string
			if( !bSubItems || typeof( vPropertyItem ) == "string" ){
				// Set the property name to the item
				sPropertyName = vPropertyItem;
				
				// Add a setting wherein the key is the index in the list
				// and the value is the property name
				oElementSettings.setStringValue( String( i ), sPropertyName );
			// If the property item is an array
			} else if( typeof( vPropertyItem ) == "object" && Array.isArray( vPropertyItem ) ){
				// Set the property name to the first item, which should be a string
				sPropertyName = (vPropertyItem.length > 0 &&
					typeof( vPropertyItem[ 0 ] ) == "string" ? vPropertyItem[ 0 ] : "");
				// If the name was not set
				if( sPropertyName.isEmpty() ){
					// Next!!
					continue;
				}
				
				// Get the (nested) settings object for the property
				oPropertySettings = oElementSettings.getSettingsValue( i );
				// If the object doesn't already exist
				if( !oPropertySettings ){
					// Create it
					oPropertySettings = oElementSettings.setSettingsValue( i );
				}
				
				// Set the name setting
				oPropertySettings.setStringValue( "name", sPropertyName );
				// Get the (nested) settings object for the subitems
				oSubItemSettings = oPropertySettings.getSettingsValue( "subitems" );
				// If the object doesn't already exist
				if( !oSubItemSettings ){
					// Create it
					oSubItemSettings = oPropertySettings.setSettingsValue( "subitems" );
				}
				
				// Iterate over the items, skippping the first element
				for( var j = 1; j < vPropertyItem.length; j += 1 ){
					oSubItemSettings.setStringValue( String( j - 1 ), vPropertyItem[ j ] )
				}
			}
		}
	};
	
	/*********************************************************************/
	// void : A function for setting the property options for a node
	function setNodePropertyOptions( oSettings, sNodeName, aPropNames )
	{
		// Set the property options for the named node
		setElementPropertyOptions( oSettings, "NodeNames", sNodeName, aPropNames, g_bSupportsNodeSubItems );
	};
	
	/*********************************************************************/
	// void : A function for setting common property options for multiple nodes
	function setCommonNodePropertyOptions( oSettings, aNodeNames, aPropNames )
	{
		// Iterate over the node names array
		for( var i = 0; i < aNodeNames.length; i += 1 ){
			// Set the property options for the 'current' node name
			setNodePropertyOptions( oSettings, aNodeNames[ i ], aPropNames );
		}
	};
	
	/*********************************************************************/
	// void : A function for setting the required options
	function setRequiredOptions( oSettings, bShowOptions )
	{
		// Set the initial state of the compress file checkbox
		oSettings.setBoolValue( "CompressOutput", false );
		
		// Do not to show the options
		oSettings.setBoolValue( "RunSilent", !bShowOptions );
	};
	
	/*********************************************************************/
	// Array : A function for getting an array of node names
	function getNodeNames( oNode, bRecurse )
	{
		// If we do not have a node
		if( !oNode ){
			// We are done...
			return [];
		}
		
		// Intialize the array with the name of the node passed in
		var aNames = [ oNode.name ];
		
		// If we are recursing
		if( bRecurse ){
			// Iterate over the node's children
			for( var i = 0, nNodes = oNode.getNumNodeChildren(); i < nNodes; i += 1 ){
				// Concatenate the names of the child nodes, recursively
				aNames = aNames.concat( getNodeNames( oNode.getNodeChild( i ), true ) );
			}
		}
		
		// Return the names
		return aNames;
	};



